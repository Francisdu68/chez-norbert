{% extends "base_admin.html.twig" %}
{% form_theme form 'form/admin.html.twig' %}

{% block title %}
    {% if house.id is null %}
        Ajout d'un gîte/chambre d'hôte
    {% else %}
        Édition {{ house.type == "Chambre d'hote" ? "de la chambre d'hôte" : 'du gîte'  }} "{{ house.name }}"
    {% endif %}
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .active {
            background: lightblue;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container">
        <div class="row">
            <div class="col-12 mt-4 mb-2">
                <h1>
                    {% if house.id is null %}
                        Ajout d'un gîte/chambre d'hôte
                    {% else %}
                        Édition {{ house.type == "Chambre d'hote" ? "de la chambre d'hôte" : 'du gîte'  }} "{{ house.name }}"
                    {% endif %}
                </h1>
            </div>
        </div>
        <div class="row">
            <div class="col-8">

                {{ form_start(form) }}
                    {{ form_row(form.name) }}
                    {{ form_row(form.type) }}
                    {{ form_row(form.peopleNumber) }}
                    {{ form_row(form.description) }}

                    <ul class="advantage" data-prototype="{{ form_widget(form.advantage.vars.prototype)|e('html_attr') }}">
                        {% for advantage in form.advantage %}
                            <li>{{ form_row(advantage) }}</li>
                        {% endfor %}
                    </ul>

                <script src="http://code.jquery.com/jquery.js"></script>

                <script>
                    function addTagFormDeleteLink($tagFormLi) {
                        var $removeFormButton = $('<button type="button">Delete this advantage</button>');
                        $tagFormLi.append($removeFormButton);

                        $removeFormButton.on('click', function(e) {
                            // remove the li for the tag form
                            $tagFormLi.remove();
                        });
                    }

                    jQuery(document).ready(function() {
                        // Get the ul that holds the collection of tags
                        $collectionHolder = $('ul.advantage');

                        // add a delete link to all of the existing tag form li elements
                        $collectionHolder.find('li').each(function() {
                            addTagFormDeleteLink($(this));
                        });
                    });
                </script>

                {# button add #}
                <script>
                    function addTagForm($collectionHolder, $newLinkLi) {
                        // Get the data-prototype explained earlier
                        var prototype = $collectionHolder.data('prototype');

                        // get the new index
                        var index = $collectionHolder.data('index');

                        var newForm = prototype;
                        // You need this only if you didn't set 'label' => false in your tags field in TaskType
                        // Replace '__name__label__' in the prototype's HTML to
                        // instead be a number based on how many items we have
                        // newForm = newForm.replace(/__name__label__/g, index);

                        // Replace '__name__' in the prototype's HTML to
                        // instead be a number based on how many items we have
                        newForm = newForm.replace(/__name__/g, index);

                        // increase the index with one for the next item
                        $collectionHolder.data('index', index + 1);

                        // Display the form in the page in an li, before the "Add a tag" link li
                        var $newFormLi = $('<li></li>').append(newForm);
                        $newLinkLi.before($newFormLi);
                    }

                    var $collectionHolder;

                    // setup an "add a tag" link
                    var $addTagButton = $('<button type="button" class="add_tag_link">Add a Advantage</button>');
                    var $newLinkLi = $('<div></div>').append($addTagButton);

                    jQuery(document).ready(function() {
                        // Get the ul that holds the collection of tags
                        $collectionHolder = $('ul.advantage');

                        // add the "add a tag" anchor and li to the tags ul
                        $collectionHolder.append($newLinkLi);

                        // count the current form inputs we have (e.g. 2), use that as the new
                        // index when inserting a new item (e.g. 2)
                        $collectionHolder.data('index', $collectionHolder.find(':input').length);

                        $addTagButton.on('click', function(e) {
                            // add a new tag form (see next code block)
                            addTagForm($collectionHolder, $newLinkLi);
                        });
                    });
                </script>
                    <button class="btn btn-{{ house.id is null ? 'success' : 'primary' }}">
                        {% if house.id is null %}
                            Créer
                        {% else %}
                            Mettre à jour
                        {% endif %}
                    </button>
                {{ form_end(form) }}
            </div>

            {% if house.id is not null %}
            <div class="col-4">
                <div class="row d-flex" data-image-container>
                    {% for media in house.medias %}
                        <div class="col-md-8 mb-4">
                            <img src="{{ vich_uploader_asset(media, 'imageFile') }}" alt="{{ media.alt }}" class="img-fluid mb-2">
                            <div>
                                <button
                                    class="btn btn-primary"
                                    data-toggle="modal"
                                    data-alt="{{ media.alt }}"
                                    data-image-url="{{ vich_uploader_asset(media, 'imageFile') }}"
                                    data-target="#imageModal"
                                    data-media-id="{{ media.id }}">
                                    Modifier
                                </button>
                                <a href="{{ path('api.admin.media.delete', { id: media.id }) }}" class="btn btn-danger" data-delete data-token="{{ csrf_token('delete' ~ media.id) }}">
                                    Supprimer
                                </a>
                            </div>
                        </div>
                    {% endfor %}
                </div>

                <div class="row">
                    <h5 class="col-md-8 mt-4 mb-2">
                       Ajouter un média
                    </h5>
                    <div class="col-md-8">
                        {% with { form: mediaForm, creation: true } only %}
                            {% include "admin/media/_form.html.twig" %}
                        {% endwith %}

{#                        {% with form = mediaForm only %}#}
{#                            {% set form.action = path('api.admin.house.media.add', { id: house.id }) %}#}
{#                            {% include "admin/media/_form.html.twig" %}#}
{#                        {% endwith %}#}

{#                        {{ form_start(mediaForm, { attr: { 'data-add-media': '' } }) }}#}
{#                            {{ form_row(mediaForm.alt) }}#}
{#                            {{ form_row(mediaForm.imageFile) }}#}

{#                            <button class="btn btn-success">Ajouter</button>#}
{#                        {{ form_end(mediaForm) }}#}
                    </div>
                </div>
            </div>
            {% endif %}
        </div>
    </div>

    <div class="modal fade" id="imageModal" tabindex="-1" role="dialog" aria-labelledby="imageModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="imageModalLabel">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="media-update" method="post">
                        <img src="#" class="img-fluid" data-image>
                        <div class="form-group">
                            <label for="alt">Texte alternatif</label>
                            <input type="text" id="alt" class="form-control" data-alt name="media[alt]">
                        </div>

                        <button type="submit" class="btn btn-primary">Mettre à jour</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>

        $('#imageModal').on('show.bs.modal', function (e) {
            const button = $(e.relatedTarget)

            const modal = $(this)
            modal.find('form').attr('data-media-id', button.data('mediaId'))
            modal.find('[data-image]').attr('src', button.data('imageUrl'))
            modal.find('[data-alt]').attr('value', button.data('alt'))
        })

        document.querySelector('#media-update').addEventListener('submit', (e) => {
            e.preventDefault()
            const mediaId = e.target.dataset.mediaId

            const body = new FormData (e.target)

            fetch (`/api/admin/house/media/${mediaId}`, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json',
                },
                body
            })
                .then (response => response.json ())
                .then (data => console.log(data))
                .catch(error => console.log(error))

            // /api/admin/house/media/
        })

        const handleMediaDelete = e => {
            e.preventDefault()
            //
            // const formData = new FormData()
            // formData.append('_token', a.dataset.token)

            const a = e.target

            fetch (a.href, {
                method: 'DELETE',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Accept': 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify({
                    '_token':a.dataset.token
                })
            })
                .then (response => response.json())
                .then(data => {
                    if (data.success === 1) {
                        a.parentNode.parentNode.parentNode.removeChild(a.parentNode.parentNode)
                    } else {
                        console.log(data.error)
                    }
                })
                .catch(error => console.log(error))

        }

        document.querySelectorAll('[data-add-media]')
            .forEach(form => form.addEventListener('submit', e => {
                e.preventDefault()

                const formData = new FormData (form)

                form.reset()

                fetch (form.action, {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Accept': 'application/json',
                    },
                    method: form.method,
                    body: formData
                })
                    .then (response => response.json())
                    .then (data => {
                        const div = document.createElement('div')
                        div.setAttribute('class', 'col-md-8 mb-4')

                        const img = document.createElement('img')
                        img.src = data.media.filename
                        img.setAttribute('class', 'img-fluid mb-2')

                        div.appendChild(img)

                        const btnWrapper = document.createElement('div')

                        const editButton = document.createElement('button')
                        editButton.dataset = {
                            alt: data.media.alt,
                            imageUrl: data.media.filename
                        }
                        editButton.setAttribute('class', 'btn btn-primary mr-1')
                        editButton.textContent = 'Modifier'
                        btnWrapper.appendChild(editButton)

                        const link = document.createElement('a')
                        link.href = data.url
                        link.setAttribute('class', 'btn btn-danger')
                        link.dataset.delete = ''
                        link.dataset.token = data.token
                        link.textContent = 'Supprimer'
                        btnWrapper.appendChild(link)

                        div.appendChild(btnWrapper)

                        div.addEventListener('click', handleMediaDelete)

                        document.querySelector('[data-image-container]')
                            .appendChild(div)
                    })
                    .catch (error => console.log(error))
            }))

        document.querySelectorAll('[data-delete]')
            .forEach(a => a.addEventListener('click', e => handleMediaDelete(e)))

        document.querySelectorAll('[data-select]')
            .forEach(selectWrapper => {
                selectWrapper.addEventListener('click', () => {
                    const optionId = selectWrapper.dataset.option
                    const option = document.querySelector(`option[value="${optionId}"]`)

                    option.selected = !option.selected

                    if (option.selected) selectWrapper.classList.add('active')
                    else selectWrapper.classList.remove('active')
                    //const select = document.querySelector(`select#${selectId}`)
                    //const selected = Array.isArray(select.value) ? select.value : [ select.value ]

                    //const isAlreadySelected = selected.find (v => v === optionId)

                    //select.value = isAlreadySelected ? selected.filter (v => v !== select.value) : [ ...selected, optionId ]


                })
            })
    </script>
{% endblock %}